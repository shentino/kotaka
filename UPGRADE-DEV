How to handle upgrades as a developer of Kotaka
-----------------------------------------------

Upgrading an end user's MUD is a required at times operation.

Minimizing disruption of the end user's code is paramount.

General principles is, that each module's InitD is responsible first
checking and then enforcing the upgrades for all of the code in its
module.

Principles:

1.  System is special

It is the heart of the system and holds rule over the other modules in
the library, therefore it must be treated specially.

Current upgrade procedure:

1.  Have INITD recompile itself.

	INITD is the heart of the System module and also has a fixed API
	that it must adhere to with the kernel library.

	INITD's first move will be to fire a callout and then recompile itself.

	The callout will run in the newly recompiled INITD and will
	handle the process.

	To ensure a clean recompile we destruct all System inheritables first.

2.  Have the upgraded INITD upgrade System.

	The upgraded INITD will then do what it needs to upgrade the
	System module and prepare for upgrades of the other modules.

	Once INITD has finished upgrading the System module, ModuleD will
	send an upgrade signal to the other modules.

3.  Modules upgrade themselves.

	Each module is responsible for upgrading itself.  This should probably be done:

	1.  Each module should recompile itself.

	2.  Each module should then upgrade itself.

	3.  If the module cannot upgrade itself, it should emit a diagnostic.

	Upgrade signals are delivered in an undefined order and any
	module must at any time be prepared to have another module in a
	state before or after upgrading.  It should also be prepared to
	be accessed both before and after it is upgraded.

	Any modules that change the api exposed to other modules must be
	prepared to accept access under the previous API.  The System
	module will also be required to comply with this.

4.  Global rebuild.

	All modules are given a chance to purge their libraries and unneeded objects.

	After this, all modules are given a chance to compile or recompile.
