How to upgrade your mud
-----------------------

Every upgrade has the following sequence of events:

1.  advanced notice

	Any API changes will be announced at least one version in advance.

	For the purposes of this section, a change means anything that
	will cause the old API to be unusable.

	Unless otherwise noted, until the old API is obsoleted, it will
	remain valid to use both APIs at the same time, though warnings
	may be issued if the old API is used.

2.  preparation

	If anything needs done to prepare for an upgrade, those
	instructions will be provided, and should be completed before the
	actual upgrade.

3.  upgrade

	Use the upgrade command to start the upgrade process.

	This command is responsible for taking care of all of kotaka's
	native code.

4.  post upgrade work

	Instructions may be provided for things needing to be done after
	the upgrade is completed.

5.  recompiling (optional)

	It is advisable to keep all objects up to date with reference to
	their source code and inherits.

	Anything that depends on a source or header file that has been
	changed, or inherits a library that has been recompiled, should
	be recompiled as well.

Current API changes pending
---------------------------

Deprecation of multiple archetypes

	To avoid exponential complexity in a few areas, as well as encourage
	neater data inheritance, multiple archetypes are deprecated.

	They will be forbidden in the future, and later forcibly removed.

	To prepare for this change any object with multiple archetypes
	should be reworked.

	Version 0.50:

		New API will be provided to query and set a single archetype.

			For the time being, the interface will manipulate
			the archetype array as if it had a single
			element.

			set_archetype will set this array to a single element array

			query_archetype will return nil if the array is
			empty or the only element if there is one, and
			will raise an error if the object has multiple archetypes.

		Formal deprecation.

			Warnings will be logged if an attempt is made to assign
			multiple archetypes to an object.

	Version 0.51:

		The old api will raise runtime errors if an attempt is
		made to assign multiple archetypes to an object.

		The old api will also issue warnings if it is used at all.

	Version 0.52:

		The new api will become mandatory

		The old api will be completely removed

		Any object with multiple archetypes will have their
		archetype list truncated to the first archetype.

Deprecation of constructors and destructors

	I just realized that inheritables can be added and removed from
	an object's inheritance tree at will by anyone with access to the
	object's source code.

	They are therefore completely useless.

	Version 0.50:

		Formal deprecation.

		Initds who return answers to the queries will flag
		warning messages.

	Version 0.51:

		Initds will no longer be queried about them and calls to them
		will no longer be made during creation or destruction.

	Version 0.52:

		the PROGRAM_INFO lwo will be purged of all related fields
		and queries of such fields will trigger the standard
		runtime error for calling an undefined function.

ModuleD will be official registry for modules

	In the future, the existence of a module's InitD will no longer
	be the official indication of the module's being online.

	Version 0.50

		Usage of the module's initd's existence as an indication
		of the module's status will be formally deprecated.

		Going forward, ModuleD should be explicitly queried
		regarding a module's state.

		ModuleD's interface for booting and shutting down modules
		should be used exclusively.

	Version 0.51

		ModuleD's record on the status of a particular module
		will no longer automatically reflect the status of the
		module's initd.

		Modules will only be sent signals by ModuleD if they are
		officially online according to ModuleD's records

		A module registered as online, but whose initd is not
		compiled, will be an anomalous state that will generate a
		runtime error.  Such a detected status will cause the
		defunct module's missing initd to be deprived of signals.